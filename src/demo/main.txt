/*********
  Rui Santos
  Complete project details at https://randomnerdtutorials.com
*********/
#include <FingerSensor.h>
#include <SSD1306.h>
#include <SPI.h>
#include <Arduino.h>
#include <WiFi.h>
#include <FirebaseESP32.h>
#include <RFID.h>

// Provide the token generation process info.
#include <addons/TokenHelper.h>

// Provide the RTDB payload printing info and other helper functions.
#include <addons/RTDBHelper.h>

/* 1. Define the WiFi credentials */
#define WIFI_SSID "Tang 2"
#define WIFI_PASSWORD "mattrinho"

// For the following credentials, see examples/Authentications/SignInAsUser/EmailPassword/EmailPassword.ino

/* 2. Define the API Key */
#define API_KEY "AIzaSyDiq8jNjStXjd42oSQBZBO49VdOJBTi-Xw"

/* 3. Define the RTDB URL */
#define DATABASE_URL "smart-home-db-94cde-default-rtdb.asia-southeast1.firebasedatabase.app" //<databaseName>.firebaseio.com or <databaseName>.<region>.firebasedatabase.app

/* 4. Define the user Email and password that alreadey registerd or added in your project */
#define USER_EMAIL "admin@gmail.com"
#define USER_PASSWORD "password"

// Define Firebase Data object
FirebaseData stream;
FirebaseData fbdo;

FirebaseAuth auth;
FirebaseConfig config;

#define FINGER_TOUCH_PIN 4

void create_new_finger();
void handleFingerButtonTouching();
void firebase_init();

void setup()
{
    Serial.begin(115200);
    while (!Serial)
        ;
    delay(100);

    rfid_init();

    pinMode(FINGER_TOUCH_PIN, INPUT);

    init_finger_sensor();
    ssd1306_init();
    ssd1306_clear();
    ssd1306_write_to_row(10, "Hello World!");

    firebase_init();
    // finger_mode = FINGER_CREATION;
}

void loop() // run over and over again
{
    if (finger_mode == FINGER_DETECTION)
    {
        getFingerprintIDez();
        delay(50); // don't ned to run this at full speed.
        if (!digitalRead(FINGER_TOUCH_PIN))
        {
            handleFingerButtonTouching();
        }
    }
    else
    {
        create_new_finger();
    }

    rfid_handle();
    delay(10);
}

void handleFingerButtonTouching()
{
    if (!digitalRead(FINGER_TOUCH_PIN))
    {
        Serial.println("Finger Button TOUCHING: ...");
        long startPressTime = millis();
        while (!digitalRead(FINGER_TOUCH_PIN))
        {
            delay(500);
            if (millis() - startPressTime > 3000)
            {
                Serial.println("Change to Finger Creation Mode!");
                finger_mode = FINGER_CREATION;
                break;
            }
        }
        Serial.println("TOUCHED: " + String(millis() - startPressTime));
    }
}

void create_new_finger()
{
    Serial.println("Ready to enroll a fingerprint!");
    while (!getFingerprintEnroll())
    {
        if (finger_mode == FINGER_DETECTION)
        {
            finger.getTemplateCount();
            Serial.print("Sensor contains ");
            Serial.print(finger.templateCount);
            Serial.println(" templates");
            Serial.println("Waiting for valid finger...");
            break;
        }
    }

    if (finger_mode == FINGER_DETECTION)
    {
        finger.getTemplateCount();
        Serial.print("Sensor contains ");
        Serial.print(finger.templateCount);
        Serial.println(" templates");
        Serial.println("Waiting for valid finger...");
    }
}

void streamCallback(StreamData data)
{
    Serial.printf("sream path, %s\nevent path, %s\ndata type, %s\nevent type, %s\n\n",
                  data.streamPath().c_str(),
                  data.dataPath().c_str(),
                  data.dataType().c_str(),
                  data.eventType().c_str());
    printResult(data); // see addons/RTDBHelper.h
    Serial.println();

    // This is the size of stream payload received (current and max value)
    // Max payload size is the payload size under the stream path since the stream connected
    // and read once and will not update until stream reconnection takes place.
    // This max value will be zero as no payload received in case of ESP8266 which
    // BearSSL reserved Rx buffer size is less than the actual stream payload.
    Serial.printf("Received stream payload size: %d (Max. %d)\n\n", data.payloadLength(), data.maxPayloadLength());
}

void streamTimeoutCallback(bool timeout)
{
    if (timeout)
        Serial.println("stream timed out, resuming...\n");

    if (!stream.httpConnected())
        Serial.printf("error code: %d, reason: %s\n\n", stream.httpCode(), stream.errorReason().c_str());
}

void firebase_init()
{
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    Serial.print("Connecting to Wi-Fi");
    while (WiFi.status() != WL_CONNECTED)
    {
        Serial.print(".");
        delay(300);
    }
    Serial.println();
    Serial.print("Connected with IP: ");
    Serial.println(WiFi.localIP());
    Serial.println();

    Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);

    /* Assign the api key (required) */
    config.api_key = API_KEY;

    /* Assign the user sign in credentials */
    auth.user.email = USER_EMAIL;
    auth.user.password = USER_PASSWORD;

    /* Assign the RTDB URL (required) */
    config.database_url = DATABASE_URL;

    /* Assign the callback function for the long running token generation task */
    config.token_status_callback = tokenStatusCallback; // see addons/TokenHelper.h

    // Or use legacy authenticate method
    // config.database_url = DATABASE_URL;
    // config.signer.tokens.legacy_token = "<database secret>";

    // To connect without auth in Test Mode, see Authentications/TestMode/TestMode.ino

    Firebase.begin(&config, &auth);

    Firebase.reconnectWiFi(true);

    if (!Firebase.beginStream(stream, "/smart-home/living-room/devices/rfid"))
        Serial.printf("sream begin error, %s\n\n", stream.errorReason().c_str());

    Firebase.setStreamCallback(stream, streamCallback, streamTimeoutCallback);
}